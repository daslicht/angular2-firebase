
generateArray( obj:any ) {
	return Object.keys(obj).map((key)=>{ return obj[key]});
}


// let imageRef = this._firebaseApp.storage().ref().child('images/test.png');
// 	imageRef.put(vo.thumbnail).then( (snapshot) => {
// 		console.log('Uploaded a blob or file!',snapshot);
// 		console.log(snapshot.a.downloadURLs[0]);
// 	});


handleFileSelect(event) {

		let f = event.target.files[0];
		let reader = new FileReader();
		console.log('handleFileSelect event:', event);
		let files = event.target.files;
		let file = files[0]; 
		console.log(' event.srcElement.file: ', file);

		this.imageHelper.resizeWithCanvas(file).then((vo:VO)=>{
			console.log("VO:",vo)
			//filePayload = this.resizeWithCanvas(document.getElementById("hidden-img") ); 
			document.getElementById("preview").src = vo.preview;

			let imageRef = this._firebaseApp.storage().ref().child('images/test.png');
				imageRef.put(vo.thumbnail).then( (snapshot) => {
					console.log('Uploaded a blob or file!',snapshot);
					console.log(snapshot.a.downloadURLs[0]);
				});
		});
		//let test = this.resizeWithCanvas( file ); 
		//console.log('test',test);
/*		reader.onload = ((theFile) => {
			return (e) =>{
				let filePayload = e.target.files;
				//(<HTMLImageElement>document.getElementById("preview")).src = filePayload;
				let hash = new Date().valueOf(); // Generate a location based on timestamp
				//let f = new Firebase(firebaseRef + '/' + hash + '/thumbnail');
				let f = this._firebaseApp.storage().ref().child('images/test.png');
				
				//see http://stackoverflow.com/questions/35542176/typescript-property-src-does-not-exist-on-type-htmlelement			
				let temp =  document.createElement('img');
					temp.src = filePayload;
//filePayload = this.resizeWithCanvas( temp ); 
				//filePayload = this.imageHelper.resizeWithCanvas(temp);	
				this.imageHelper.resizeWithCanvas(filePayload).then((filePayload:any)=>{
					console.log("filePayload:",filePayload)
					//filePayload = this.resizeWithCanvas(document.getElementById("hidden-img") ); 
					document.getElementById("preview").src = filePayload;
				});
			*/	
			//	document.getElementsByClassName('preview-wrapper')[0].classList.remove('hidden');

				// f.set(filePayload, function() {
				// 	document.getElementsByClassName('preview-wrapper')[0].classList.add('hidden');
				// 	(<HTMLImageElement>document.getElementById("thumb")).src = filePayload;
				// 	document.getElementsByClassName('thumb')[0].classList.remove('hidden');
				// 	// document.getElementById('file-upload').classList.add('hidden'); // hide the upload field
				// });
				//console.log('filepayload: ', typeof(filePayload) , filePayload )
			/*	f.put(filePayload).then( (snapshot) => {
					console.log('Uploaded a blob or file!',snapshot);
					console.log(snapshot.a.downloadURLs[0]);
					document.getElementsByClassName('preview-wrapper')[0].classList.add('hidden');
					(<HTMLImageElement>document.getElementById("thumb")).src = filePayload;
					document.getElementsByClassName('thumb')[0].classList.remove('hidden');

				});*/

		// 	};
		// })(f);

		//reader.readAsDataURL(f);
	}

	createThunbnail() {

	}